plugins {
	//id 'com.github.jk1.dependency-license-report' version '1.2'
    id "com.github.hierynomus.license" version "0.14.0"
	id "com.github.spotbugs" version "1.6.2"
}

// Load version definitions for dependencies. Info will be stored in 'versions' map
apply from: 'versions.gradle'

allprojects {
	apply plugin: 'eclipse'
    apply plugin: 'jacoco'
	
  	group = 'icarus2'
  	version = '0.0.1'
}

description = 'ICARUS 2 framework root'
	
// Gradle Wrapper
wrapper { 
	gradleVersion = "4.8" 
}


subprojects {
  	apply plugin: 'java-library'
  	//apply plugin: 'maven-publish'
  	apply plugin: 'checkstyle'
  	apply plugin: 'com.github.spotbugs'  	
	apply plugin: 'com.github.hierynomus.license'
	
  	sourceCompatibility = 1.8
  	targetCompatibility = 1.8

  	repositories {
    	mavenCentral()
  	}  
	  	
	configurations {
	
		// COMPILE ENVIRONMENT
		spotbugs {
			exclude group:'com.google.code.findbugs', module:'findbugs'
		}
		// default bug detection functionality
		//TODO due to continuing bug of slf4j-api disappearing from compileClasspath when spotbugs is used we rely on the eclipse plugin instead
		//compileOnly.extendsFrom(spotbugs)
		
		// RUNTIME ENVIRONMENT
		slf4j
		guava
		fastutil
		javapoet
		xerces
		lucene
		// default logging functionality
		implementation.extendsFrom(slf4j)
			
		// TEST ENVIRONMENT
		junit
		mockito
		uuid
		// default testing functionality
		testImplementation.extendsFrom(junit, mockito)
		//compileOnly.extendsFrom(junitLauncher)
	
		// configuration for the test code artifact
		tests.extendsFrom(testImplementation)
	}
	  	
	dependencies {
	
		// COMPILE ENVIRONMENT
		
		spotbugs "net.jcip:jcip-annotations:${versions.jcipVersion}"
  		spotbugs "com.github.spotbugs:spotbugs:${versions.spotbugsVersion}"
		spotbugs "com.github.spotbugs:spotbugs-annotations:${versions.spotbugsVersion}"
		
		// RUNTIME ENVIRONMENT
	
	    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
		slf4j "org.slf4j:slf4j-api:${versions.slf4jVersion}"
	    // https://mvnrepository.com/artifact/org.slf4j/slf4j-jdk14
		slf4j "org.slf4j:slf4j-jdk14:${versions.slf4jVersion}"
	
	    // https://mvnrepository.com/artifact/com.google.guava/guava
		guava "com.google.guava:guava:${versions.guavaVersion}"
	
	    // https://mvnrepository.com/artifact/it.unimi.dsi/fastutil
		fastutil "it.unimi.dsi:fastutil:${versions.fastutilVersion}"
	
	    // https://mvnrepository.com/artifact/com.squareup/javapoet
		javapoet "com.squareup:javapoet:${versions.javapoetVersion}"
	    
	    // https://mvnrepository.com/artifact/xerces/xercesImpl
		xerces "xerces:xercesImpl:${versions.xercesVersion}"
	  
	  	// https://mvnrepository.com/artifact/org.apache.lucene/lucene-core
		lucene "org.apache.lucene:lucene-core:${versions.luceneVersion}"
			
		// TEST ENVIRONMENT
		
		//junit platform("org.junit:junit-bom:${versions.junitVersion}")
		    
	    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
		junit "org.junit.jupiter:junit-jupiter-api:${versions.junitVersion}"
		// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
		junit "org.junit.jupiter:junit-jupiter-engine:${versions.junitVersion}"		
		// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-params
		junit "org.junit.jupiter:junit-jupiter-params:${versions.junitVersion}"
		
		junit "org.junit.platform:junit-platform-runner:${versions.junitRunnerVersion}"
			
	    // https://mvnrepository.com/artifact/org.mockito/mockito-core
		mockito "org.mockito:mockito-core:${versions.mockitoVersion}"
	  
		// https://mvnrepository.com/artifact/com.fasterxml.uuid/java-uuid-generator
		uuid "com.fasterxml.uuid:java-uuid-generator:${versions.uuidVersion}"
	}
  	
  	tasks.withType(JavaCompile) {
  		options.encoding = 'UTF-8'
    	options.fork = true
 	}
		
	test {
 		useTestNG()
	    useJUnitPlatform()
	}
	
	javadoc {
	    options.encoding = 'UTF-8'
	}
	
	downloadLicenses {
	    ext.apacheTwo = license('Apache License, Version 2.0', 'http://opensource.org/licenses/Apache-2.0')
	    ext.bsd = license('BSD License', 'http://www.opensource.org/licenses/bsd-license.php')
	
	    includeProjectDependencies = true

	    aliases = [
	        (apacheTwo) : ['The Apache Software License, Version 2.0', 'Apache 2', 'Apache License Version 2.0', 'Apache License, Version 2.0', 'Apache License 2.0', license('Apache License', 'http://www.apache.org/licenses/LICENSE-2.0')],
	        (bsd) : ['BSD', license('New BSD License', 'http://www.opensource.org/licenses/bsd-license.php')]
	    ]
	
	    dependencyConfiguration = 'runtime'
	}
	
	license {
		ext.year = '2014-'+Calendar.getInstance().get(Calendar.YEAR)
		ext.name = 'Markus GÃ¤rtner'
		ext.email = 'markus.gaertner@ims.uni-stuttgart.de'
		
		header = rootProject.file('LICENSE_HEADER')
		
		includes(["**/*.java", "**/*.properties", "**/*.ini", "**/*.xml", "**/*.xsd"])
		
		// pakage-info.java already has a documentation header, don't need conflicts here!
		excludes(["**/package-info.java"])
		
		mapping {
			// Per default the plugin uses full javadoc style for license headers.
			// We prefer normal multiline comment style to distinguish it from the
			// documentation after package and import statements.
			java = 'SLASHSTAR_STYLE'
		}
		
	    ignoreFailures = true
		useDefaultMappings = true
		dryRun = false
		strictCheck=true
	}
	
	spotbugs {
	    toolVersion = "3.1.6"
	    ignoreFailures = true
	    effort = "max"
	    showProgress = false
	    reportLevel = "medium"
	}
	
	// Switch spotbugs reporting to be html only
	tasks.withType(com.github.spotbugs.SpotBugsTask) {
	    reports {
	        xml.enabled false
	        html.enabled true
	    }
	}
	
	// For when we need new subprojects
    task createProjectStructure {
    	doLast {
			sourceSets*.java.srcDirs*.each { it.mkdirs() }
			sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    	}   
    }
    
    checkstyle {
	    ignoreFailures = true
	    showViolations = false
    }
    
    // Switch checkstyle reporting to be html only
    tasks.withType(Checkstyle) {
	    reports {
	        xml.enabled false
	        html.enabled true
	    }
	}
    
	// Bundle test classes into a jar usable for other projects
	task testJar(type: Jar, dependsOn: testClasses) {
		baseName = "test-${project.archivesBaseName}"
	    from sourceSets.test.output
	}
	
	artifacts {
	    tests testJar
	}
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml" as File
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}
