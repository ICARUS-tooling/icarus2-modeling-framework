
plugins {
	id 'java-library'
	id 'jacoco'
	id 'com.github.kt3k.coveralls' version '2.8.4'
	id 'com.github.johnrengelman.shadow' version '4.0.1' apply false
    id 'com.github.hierynomus.license' version '0.15.0' apply false
	id 'net.ltgt.apt-eclipse' version '0.21'
	id 'nebula.lint' version '16.17.0'
}

// Load version definitions for dependencies. Info will be stored in 'versions' map
apply from: 'versions.gradle'

description = 'ICARUS 2 framework root'

allprojects {
	apply plugin: 'eclipse'
	apply plugin: 'jacoco'
	apply plugin: 'nebula.lint'

	group = 'de.unistuttgart.ims.icarus2'

	// For now all projects follow the global pre-release version (this will change with 1.0.0 !!)
	version = '0.1.0'

	repositories { mavenCentral() }
}
	
// Gradle Wrapper
wrapper { 
	// to upgrade wrapper: ./gradlew wrapper --distribution-type bin --gradle-version <version>
	gradleVersion = "6.0.1" 
}

// Build Scan publishing
buildScan {
	termsOfServiceUrl = 'https://gradle.com/terms-of-service'
	termsOfServiceAgree = 'yes'

	publishAlways()
}

gradleLint {
	// https://github.com/nebula-plugins/gradle-lint-plugin/wiki
	rules  = ['all-dependency', 'duplicate-dependency-class']
}

subprojects {
  	apply plugin: 'java-library'
  	apply plugin: 'maven-publish'
  	apply plugin: 'checkstyle'		
	apply plugin: 'com.github.hierynomus.license'
	apply plugin: 'com.github.johnrengelman.shadow'
	apply plugin: 'net.ltgt.apt-eclipse'
	
  	sourceCompatibility = 1.8
  	targetCompatibility = 1.8

	sourceSets {
		jmh {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
		}
	}

	configurations {
	
		// COMPILE ENVIRONMENT
		// default bug detection functionality
		//TODO due to continuing bug of slf4j-api disappearing from compileClasspath when spotbugs is used we rely on the eclipse plugin instead
		//compileOnly.extendsFrom(spotbugs)
		
		// RUNTIME ENVIRONMENT
		slf4j
		guava
		fastutil
		javapoet
		xerces
		lucene
		antlrRuntime
		json
		apiguardian
		
		// GUI related stuff
		jgoodies
		jgraph
			
		// TEST ENVIRONMENT
		junit
		slf4jTest // allows to add slf4j bindings only used during testing
		mockito
		uuid
		assertj
		
		// BENCHMARK ENVIRONMENT (JMH)
		benchmark
		
		// default testing functionality
		testImplementation.extendsFrom(junit, slf4jTest, mockito, assertj)
	
		// configuration for the test code artifact
		tests.extendsFrom(testImplementation)
		
		// ensure that benchmarking has access to all needed classes
		jmhImplementation.extendsFrom(implementation, testImplementation, benchmark)
	}
	  	
	dependencies {
	
		// COMPILE ENVIRONMENT

		// RUNTIME ENVIRONMENT
	
	    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
		slf4j "org.slf4j:slf4j-api:${versions.slf4j}"
	
	    // https://mvnrepository.com/artifact/com.google.guava/guava
		guava "com.google.guava:guava:${versions.guava}"
	
	    // https://mvnrepository.com/artifact/it.unimi.dsi/fastutil
		fastutil "it.unimi.dsi:fastutil:${versions.fastutil}"
	
	    // https://mvnrepository.com/artifact/com.squareup/javapoet
		javapoet "com.squareup:javapoet:${versions.javapoet}"
	    
	    // https://mvnrepository.com/artifact/xerces/xercesImpl
		xerces "xerces:xercesImpl:${versions.xerces}"
	  
	  	// https://mvnrepository.com/artifact/org.apache.lucene/lucene-core
		lucene "org.apache.lucene:lucene-core:${versions.lucene}"
		
		// https://mvnrepository.com/artifact/org.antlr/antlr4-runtime
		antlrRuntime "org.antlr:antlr4-runtime:${versions.antlr}"
		
		// https://github.com/apiguardian-team/apiguardian
		apiguardian "org.apiguardian:apiguardian-api:${versions.apiguardian}"		
		// https://github.com/apiguardian-team/apiguardian
		apiguardian "com.google.code.findbugs:jsr305:${versions.jsr305}"
		
		// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
		json "com.fasterxml.jackson.core:jackson-databind:${versions.json}"
		// https://mvnrepository.com/artifact/com.fasterxml.jackson.module/jackson-module-jsonSchema
		json "com.fasterxml.jackson.module:jackson-module-jsonSchema:${versions.json}"
		json "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${versions.json}"
		
		// https://mvnrepository.com/artifact/com.jgoodies/jgoodies-forms
		jgoodies "com.jgoodies:jgoodies-forms:${versions.jgoodies}"
		
		// https://mvnrepository.com/artifact/com.github.vlsi.mxgraph/jgraphx
		jgraph "com.github.vlsi.mxgraph:jgraphx:${versions.jgraph}"
			
		// TEST ENVIRONMENT
		
		junit platform("org.junit:junit-bom:${versions.junit}")
		    
	    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
		junit "org.junit.jupiter:junit-jupiter-api"
		// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
		junit "org.junit.jupiter:junit-jupiter-engine"		
		// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-params
		junit "org.junit.jupiter:junit-jupiter-params"		
    	// https://mvnrepository.com/artifact/org.junit.platform/junit-platform launcher
		junit "org.junit.platform:junit-platform-launcher"
		
		// https://mvnrepository.com/artifact/org.slf4j/slf4j-jdk14
		slf4jTest "org.slf4j:slf4j-jdk14:${versions.slf4j}"
			
	    // https://mvnrepository.com/artifact/org.mockito/mockito-core
		mockito "org.mockito:mockito-core:${versions.mockito}"
	  
		// https://mvnrepository.com/artifact/com.fasterxml.uuid/java-uuid-generator
		uuid "com.fasterxml.uuid:java-uuid-generator:${versions.uuid}"
		
		assertj "org.assertj:assertj-core:${versions.assertj}"
		
		// BENCHMARK ENVIRONMENT (JMH)
		
		jmhImplementation project
		benchmark "org.openjdk.jmh:jmh-core:${versions.jmh}"
		benchmark "org.openjdk.jmh:jmh-generator-annprocess:${versions.jmhAp}"
		jmhAnnotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:${versions.jmhAp}"
	}
  	
  	tasks.withType(JavaCompile) {
  		options.encoding = 'UTF-8'
    	options.fork = true
 	}

	 // Only relevant when developing with Eclipse IDE
	eclipse {
		classpath {
			// Ensure the JMH configuration is on the eclipse classpath
			plusConfigurations += [ configurations.jmhCompileClasspath ]

			// Mark source folders in eclipse as "contains test files"
			containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
			file {
				beforeMerged { classpath -> 
					def aptFolder = new org.gradle.plugins.ide.eclipse.model.SourceFolder('.apt_generated', null)
					aptFolder.entryAttributes['optional'] = 'true'
					aptFolder.entryAttributes['ignore_optional_problems'] = 'true'
					entries.add(aptFolder)
					
					//TODO need to figure out a good output folder for this source folder
					def aptTestFolder = new org.gradle.plugins.ide.eclipse.model.SourceFolder('.apt_generated_tests', 'bin/apt-gen-test')
					aptTestFolder.entryAttributes['optional'] = 'true'
					aptTestFolder.entryAttributes['ignore_optional_problems'] = 'true'
					aptTestFolder.entryAttributes['test'] = 'true'
					entries.add(aptTestFolder)
				}
				whenMerged { classpath ->
					entries.findAll {
						it.kind == 'src' &&  it.path.startsWith('src/test/')
					}.each {
						it.entryAttributes['test'] = 'true'
					}
					entries.findAll {
						it.kind == 'src' &&  it.path.startsWith('build/generated-src/')
					}.each {
						it.entryAttributes['optional'] = 'true'
						it.entryAttributes['ignore_optional_problems'] = 'true'
					}
				}
			}
		}

		// Annotation processing (folders and configuration)
		jdt {
			/*
			 *  Run 
			 *    gradle eclipseJdtApt eclipseFactorypath eclipseJdt 
			 *  for any project that needs annotation processing turned on in eclipse
			 */ 
			apt {
				// whether annotation processing is enabled in Eclipse
				aptEnabled = compileJava.aptOptions.annotationProcessing
				// where Eclipse will output the generated sources; values are interpreted as per project.file()
				genSrcDir = file('.apt_generated')
				genTestSrcDir = file('.apt_generated_tests')
				// whether annotation processing is enabled in the editor
				reconcileEnabled = true
				// a map of annotation processor options; a null value will pass the argument as -Akey rather than -Akey=value
				processorOptions = compileJava.aptOptions.processorArgs
			}
		}
		
		// Annotation processing (ensuring declared processors are forwarded to eclipse)
		factorypath {
			//TODO add task or hook to clear out previous factorypath entries
			plusConfigurations = [ configurations.annotationProcessor, configurations.testAnnotationProcessor, configurations.jmhAnnotationProcessor ]
			minusConfigurations = []
		}
	}
	
//	task prepareApt {
//		description = 'Shorthand task for preparing annotation processing in eclipse'
//		dependsOn eclipseJdtApt eclipseFactorypath eclipseJdt
//	}

	// Lets us create a ready-to-use jar for benchmarking on other machines
	task jmhJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
		group = 'jmh'
		description = 'Create a benchmark jar with all dependencies included'
		dependsOn jmhClasses
		archiveClassifier = 'jmh'
		from sourceSets.jmh.output + sourceSets.main.output + sourceSets.test.output
		configurations = [project.configurations.jmhRuntime]
		manifest {
			attributes 'Main-Class': 'org.openjdk.jmh.Main'
		}
	}

	shadowJar {
		archiveClassifier = 'shadow'
	}

	test {
	    useJUnitPlatform {
			excludeTags = ['concurrent', 'integration', 'slow', 'learner']
		}
		
		minHeapSize = "256m"
		maxHeapSize = "2g"
		
		systemProperties.'junit.jupiter.execution.parallel.enabled' = !System.env.'CI'
		systemProperties.'junit.jupiter.execution.parallel.mode.default' = 'same_thread'
		systemProperties.'junit.jupiter.execution.parallel.mode.classes.default' = 'concurrent'
		 
		testLogging {
			events "failed" //, "passed", "skipped" 
			exceptionFormat "full"
		}
	}
	
	/**
	 * Specialized test tasks for integration, concurrency
	 * and very costly tests. 
	 * Association to a group is defined via the respective tag(s). Per default
	 * the 'test' task runs without any of those test types and none of them
	 * are performed on the CI environment.
	 * The 'check' task on the other hand includes ALL of them and therefore 
	 * local build might take quite some time.
	 */
	
	task integrationTest(type: Test) {
		description = 'Run integration tests based on the integration tag'
		useJUnitPlatform {
			includeTags 'integration'
		}
		check.dependsOn it
		shouldRunAfter test
	}
	
	task concurrentTest(type: Test) {
		description = 'Run concurrency tests based on the concurrent tag'
		useJUnitPlatform {
			includeTags 'concurrent'
		}
		check.dependsOn it
		shouldRunAfter test
	}
	
	task exhaustiveTest(type: Test) {
		description = 'Run all the exhaustuve tests based on the slow tag'
		useJUnitPlatform {
			includeTags 'slow'
		}
		check.dependsOn it
		shouldRunAfter test
	}
	
	jacocoTestReport {
		reports {
			html.enabled = true
			xml.enabled = true
			csv.enabled = false
		}
	}
	
	// Automatic license analysis for dependencies
	downloadLicenses {
	    ext.apacheTwo = license('Apache License, Version 2.0', 'http://opensource.org/licenses/Apache-2.0')
	    ext.bsd = license('BSD License', 'http://www.opensource.org/licenses/bsd-license.php')
	
	    includeProjectDependencies = true

	    aliases = [
	        (apacheTwo) : ['The Apache Software License, Version 2.0', 'Apache 2', 'Apache License Version 2.0', 'Apache License, Version 2.0', 'Apache License 2.0', license('Apache License', 'http://www.apache.org/licenses/LICENSE-2.0')],
	        (bsd) : ['BSD', license('New BSD License', 'http://www.opensource.org/licenses/bsd-license.php')]
	    ]
	
	    dependencyConfiguration = 'runtime'
	}
	
	// License formatting for file headers
	license {
		ext.year = '2014-'+Calendar.getInstance().get(Calendar.YEAR)
		ext.name = 'Markus Gärtner'
		ext.email = 'markus.gaertner@ims.uni-stuttgart.de'
		
		header = rootProject.file('LICENSE_HEADER')
		encoding = "UTF-8"
		
		includes(["**/*.java", "**/*.properties", "**/*.xml", "**/*.xsd", "**/*.g4"])
		
		// pakage-info.java already has a documentation header, don't need conflicts here!
		excludes(["**/generated-src/**", "**/antlr/**", "**/package-info.java"])
		
		mapping {
			// Per default the plugin uses full 'JAVADOC_STYLE' for license headers.
			// We prefer normal multiline comment style to distinguish it from the
			// documentation after package and import statements.
			java = 'SLASHSTAR_STYLE'
			g4 = 'JAVADOC_STYLE'
		}
		
	    ignoreFailures = false
		useDefaultMappings = true
		dryRun = false
		strictCheck = true
	}
	
	javadoc {
	    options.encoding = 'UTF-8'
		failOnError = false
		logging.captureStandardError LogLevel.INFO
		logging.captureStandardOutput LogLevel.INFO // suppress "## warnings" message
	}
    
    // Silence javadoc spam a bit
    tasks.withType(Javadoc) {
	    classpath = sourceSets.main.compileClasspath
		options.addBooleanOption('Xdoclint:none', true)
	}
	
	// For when we need new subprojects
    task createProjectStructure {
		description = 'create the default folder structure for a new project'
    	doLast {
			sourceSets*.java.srcDirs*.each { it.mkdirs() }
			sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    	}   
    }
    
    checkstyle {
	    ignoreFailures = true
	    showViolations = false
		sourceSets = [sourceSets.main, sourceSets.test]
    }
    
    // Switch checkstyle reporting to be html only
    tasks.withType(Checkstyle) {
	    reports {
	        xml.enabled false
	        html.enabled true
	    }
	}
	
	// Insert license file into every Jar
	tasks.withType(Jar) {
		from(rootProject.projectDir) {
			include 'LICENSE'
			into 'META-INF'
		}
	}
    
	// Bundle test classes into a jar usable for other projects
	task testJar(type: Jar, dependsOn: testClasses) {
		description = 'Bundle test classes into a jar usable for other projects'
		archiveBaseName = project.archivesBaseName
		archiveClassifier = "test"
	    from sourceSets.test.output
	}
	
	// Create a jar with javadoc
	task javadocJar(type: Jar) {
		description = 'Bundle javadoc files'
		classifier = 'javadoc'
		from javadoc
	}

	// Create a jar with soruces
	task sourcesJar(type: Jar) {
		description = 'Bundle source files'
		classifier = 'sources'
		from sourceSets.main.allSource
	}
	
    publishing {
        repositories {
			mavenLocal()
//            maven {
//                name = "GitHubPackages"
//                url = uri("https://maven.pkg.github.com/icarus-tooling/icarus2-modeling-framework")
//                credentials {	
//	                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
//	                password = project.findProperty("gpr.key") ?: System.getenv("GPR_API_KEY")
//                }
//            }
        }
        publications {
            mavenJava(MavenPublication) {  //gpr for GitHubPackages
                from(components.java)
				
				pom {
					licenses {
						license {
							name = 'The Apache License, Version 2.0'
							url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
						}
	                }
					developers {
						developer {
							id = 'mcgaerty'
							name = 'Markus Gärtner'
							email = 'markus.gaertner@ims.uni-stuttgart.de'
						}
					}
					scm {
						connection = 'scm:git:git://example.com/my-library.git'
						developerConnection = 'scm:git:ssh://github.com/ICARUS-tooling/icarus2-modeling-framework.git'
						url = 'https://github.com/ICARUS-tooling/icarus2-modeling-framework'
					}
					issueManagement {
						system = 'GitHub'
						url = 'https://github.com/ICARUS-tooling/icarus2-modeling-framework/issues'
					}
                }
            }
        }
    }
	
	artifacts {
	    tests testJar
	    archives jar, testJar, javadocJar, sourcesJar
	}
}

// Filter coverage reports 
def publishedProjects = subprojects.findAll { true } //TODO add filter pattern for subprojects

task jacocoMerge(type: JacocoMerge) {
	publishedProjects.each { subproject ->
		executionData subproject.tasks.withType(Test)
	}
	doFirst {
		executionData = files(executionData.findAll { it.exists() })
	}
}

task jacocoRootReport(type: JacocoReport, group: 'verification') {
	description = 'Generates an aggregate coverage report from all subprojects'
	dependsOn publishedProjects.test, jacocoMerge

	additionalSourceDirs.from = files(publishedProjects.sourceSets.main.allSource.srcDirs)
	sourceDirectories.from = files(publishedProjects.sourceSets.main.allSource.srcDirs)
	classDirectories.from = files(publishedProjects.sourceSets.main.output)
	executionData jacocoMerge.destinationFile

	reports {
		html.enabled = true // human readable
		xml.enabled = true // required by codecov
	}
}

coveralls {
	sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
	jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
	group = 'Coverage reports'
	description = 'Uploads the aggregated coverage report to Coveralls'

	dependsOn jacocoRootReport
	onlyIf { System.env.'CI' }
}
