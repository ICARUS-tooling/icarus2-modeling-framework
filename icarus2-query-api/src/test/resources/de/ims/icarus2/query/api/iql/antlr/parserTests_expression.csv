"input","expected","description"

# references
"xx","","simple name"
"@xx","","variable"

# literals
123,"","integer literal"
12.456,"","floating point literal"
true,"","boolean literal"
false,"","boolean literal"
+123,"","signed integer literal"
-123.456,"","signed floating point literal"
"random_text","","string literal"
"random text","randomtext","string literal with whitspace"

# path
"this.is.some.loooooong.path","","long path"
"@this.is.some.loooooong.path","","long path with variable start"

# arrays
"xx[12]","","simple array"
"@xx[34]","","variable array"

# annotations
"anno{\"test\"}","","simple annotation"
"layer.anno{\"test\"}","","path with annotation"

# path mixes
"this.is.some.loooooong.path[56]","","long path array"
"@this.is.some.loooooong.path[78]","","long path array with variable start"
"this.is[12].some.loooooong[34].path[56]","","long path with intermediate array"
"@this.is[12].some.loooooong[56].path[78]","","long path with intermediate array and variable start"
"this.is.some.loooooong.path[func()]","","long path array with call"
"@this.is.some.loooooong.path[func()]","","long path array with call and variable start"

# element mixes
"array[1].func()","","call on array element"
"array[1]{\"test\"}","","annotation on array element"
"anno{\"test\"}.func()","","call on annotation"
"anno{\"test\"}[1]","","annotation with array result"
"func()[1]","","call with array result"
"func(){\"test\"}","","call with annotation result"

# signed elements
"-func()","","signed negated call"
"+func()","","signed positive call"
"-array[1]","","signed negated array"
"+array[1]","","signed positive array"
"-anno{\"test\"}","","signed negated annotation"
"+anno{\"test\"}","","signed positive annotation"

# binary operators with int literals
"123+456","","int literal addition"
"123-456","","int literal subtraction"
"123/456","","int literal division"
"123*456","","int literal multiplication"
"123%456","","int literal modulo"
"123^456","","int literal pow"
"123&456","","int literal bitwise and"
"123|456","","int literal bitwise or"

# binary operators with floating point literals
"123.345+456.789","","floating point literal addition"
"123.654-456.34","","floating point literal subtraction"
"123.34/456","","floating point literal division"
"123.456*456.987","","floating point literal multiplication"
"123.321%456","","floating point literal modulo"
"123^456.123","","floating point literal pow"
"123.45&456.89","","floating point literal bitwise and"
"123.45|456.89","","floating point literal bitwise or"

# binary operators with string literals
"\"test1\"+\"test2\"","","string literal addition"
"\"test1\"-\"test2\"","","string literal subtraction"
"\"test1\"/\"test2\"","","string literal division"
"\"test1\"*\"test2\"","","string literal multiplication"
"\"test1\"%\"test2\"","","string literal modulo"
"\"test1\"^\"test2\"","","string literal pow"
"\"test1\"&\"test2\"","","string literal bitwise and"
"\"test1\"|\"test2\"","","string literal bitwise or"

# binary operators with boolean literals
"true+false","","boolean literal addition"
"false-true","","boolean literal subtraction"
"true/false","","boolean literal division"
"false*true","","boolean literal multiplication"
"true%false","","boolean literal modulo"
"true^false","","boolean literal pow"
"false&true","","boolean literal bitwise and"
"true|false","","boolean literal bitwise or"

# binary operators with arrays
"123+array[456]","","right array addition"
"array[123]+456","","left array addition"
"array1[123]+array2[456]","","dual array addition"
"123-array[456]","","right array subtraction"
"array[123]-456","","left array subtraction"
"array1[123]-array2[456]","","dual array subtraction"
"123/array[456]","","right array division"
"array[123]/456","","left array division"
"array1[123]/array2[456]","","dual array division"
"123*array[456]","","right array multiplication"
"array[123]*456","","left array multiplication"
"array1[123]*array2[456]","","dual array multiplication"
"123%array[456]","","right array modulo"
"array[123]%456","","left array modulo"
"array1[123]%array2[456]","","dual array modulo"
"123^array[456]","","right array pow"
"array[123]^456","","left array pow"
"array1[123]^array2[456]","","dual array pow"
"123&array[456]","","right array bitwise and"
"array[123]&456","","left array bitwise and"
"array1[123]&array2[456]","","dual array bitwise and"
"123|array[456]","","right array bitwise or"
"array[123]|456","","left array bitwise or"
"array1[123]|array2[456]","","dual array bitwise or"

# binary operators with references
"123+ref","","right reference addition"
"ref+456","","left reference addition"
"ref1+ref2","","dual reference addition"
"123-ref","","right reference subtraction"
"ref-456","","left reference subtraction"
"ref1-ref2","","dual reference subtraction"
"123/ref","","right reference division"
"ref/456","","left reference division"
"ref1/ref2","","dual reference division"
"123*ref","","right reference multiplication"
"ref*456","","left reference multiplication"
"ref1*ref2","","dual reference multiplication"
"123%ref","","right reference modulo"
"ref%456","","left reference modulo"
"ref1%ref2","","dual reference modulo"
"123^ref","","right reference pow"
"ref^456","","left reference pow"
"ref1^ref2","","dual reference pow"
"123&ref","","right reference bitwise and"
"ref&456","","left reference bitwise and"
"ref1&ref2","","dual reference bitwise and"
"123|ref","","right reference bitwise or"
"ref|456","","left reference bitwise or"
"ref1|ref2","","dual reference bitwise or"

# binary operators with variables
"123+@var","","right variable addition"
"@var+456","","left variable addition"
"@var1+@var2","","dual variable addition"
"123-@var","","right variable subtraction"
"@var-456","","left variable subtraction"
"@var1-@var2","","dual variable subtraction"
"123/@var","","right variable division"
"@var/456","","left variable division"
"@var1/@var2","","dual variable division"
"123*@var","","right variable multiplication"
"@var*456","","left variable multiplication"
"@var1*@var2","","dual variable multiplication"
"123%@var","","right variable modulo"
"@var%456","","left variable modulo"
"@var1%@var2","","dual variable modulo"
"123^@var","","right variable pow"
"@var^456","","left variable pow"
"@var1^@var2","","dual variable pow"
"123&@var","","right variable bitwise and"
"@var&456","","left variable bitwise and"
"@var1&@var2","","dual variable bitwise and"
"123|@var","","right variable bitwise or"
"@var|456","","left variable bitwise or"
"@var1|@var2","","dual variable bitwise or"

# binary operators with function calls
"123+func()","","right call addition"
"func()+456","","left call addition"
"func1()+func2()","","dual call addition"
"123-func()","","right call subtraction"
"func()-456","","left call subtraction"
"func1()-func2()","","dual call subtraction"
"123/func()","","right call division"
"func()/456","","left call division"
"func1()/func2()","","dual call division"
"123*func()","","right call multiplication"
"func()*456","","left call multiplication"
"func1()*func2()","","dual call multiplication"
"123%func()","","right call modulo"
"func()%456","","left call modulo"
"func1()%func2()","","dual call modulo"
"123^func()","","right call pow"
"func()^456","","left call pow"
"func1()^func2()","","dual call pow"
"123&func()","","right call bitwise and"
"func()&456","","left call bitwise and"
"func1()&func2()","","dual call bitwise and"
"123|func()","","right call bitwise or"
"func()|456","","left call bitwise or"
"func1()|func2()","","dual call bitwise or"

# binary operators with annotations
"123+anno{\"test\"}","","right annotation addition"
"anno{\"test\"}+456","","left annotation addition"
"anno1{\"test\"}+anno2{\"test\"}","","dual annotation addition"
"123-anno{\"test\"}","","right annotation subtraction"
"anno{\"test\"}-456","","left annotation subtraction"
"anno1{\"test\"}-anno2{\"test\"}","","dual annotation subtraction"
"123/anno{\"test\"}","","right annotation division"
"anno{\"test\"}/456","","left annotation division"
"anno1{\"test\"}/anno2{\"test\"}","","dual annotation division"
"123*anno{\"test\"}","","right annotation multiplication"
"anno{\"test\"}*456","","left annotation multiplication"
"anno1{\"test\"}*anno2{\"test\"}","","dual annotation multiplication"
"123%anno{\"test\"}","","right annotation modulo"
"anno{\"test\"}%456","","left annotation modulo"
"anno1{\"test\"}%anno2{\"test\"}","","dual annotation modulo"
"123^anno{\"test\"}","","right annotation pow"
"anno{\"test\"}^456","","left annotation pow"
"anno1{\"test\"}^anno2{\"test\"}","","dual annotation pow"
"123&anno{\"test\"}","","right annotation bitwise and"
"anno{\"test\"}&456","","left annotation bitwise and"
"anno1{\"test\"}&anno2{\"test\"}","","dual annotation bitwise and"
"123|anno{\"test\"}","","right annotation bitwise or"
"anno{\"test\"}|456","","left annotation bitwise or"
"anno1{\"test\"}|anno2{\"test\"}","","dual annotation bitwise or"

"true?1:2","","ternary op with literals"

# general complex version
"@var1*12 + module.func1(test1.name, -data.array1[345])","@var1*12+module.func1(test1.name,-data.array1[345])","mix of variable, function call and array"