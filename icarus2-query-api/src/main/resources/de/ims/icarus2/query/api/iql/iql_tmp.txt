

// Standalone top-level parts
standalonePreamble : preamble EOF ;
standaloneStatement : statement EOF ;
standaloneResult : result EOF ;

// Standalone statement parts
standaloneFlatStatement : flatStatement EOF ;
standaloneTreeStatement : treeStatement EOF ;
standaloneGraphStatement : graphStatement EOF ;

// Standalone helpers
standaloneVersionDeclaration : versionDeclaration EOF ;
standaloneExpression : expression EOF ;


/** Basic Rules */

query
	: preamble statement (RETURN result) (APPENDIX appendix)? EOF
	;
	
// PREAMBLE BEGIN
	
preamble
	: (DIALECT versionDeclaration)? (IMPORT importTargetList)? (SETUP propertyList)? // here goes configuration stuff, namespace declarations, etc...
	;
	
/** Import external extensions or script definitions, optionally renaming their namespace */
importTargetList
	: importTarget (COMMA importTarget)*
	;
	
importTarget
	: StringLiteral (AS Identifier)?
	;
	
/** Allows to do a general setup of query parameters */
propertyList
	: property (COMMA property)*
	;
	
property
	: key=qualifiedIdentifier # switchProperty
	| key=qualifiedIdentifier ASSIGN value=integerLiteral # intProperty
	| key=qualifiedIdentifier ASSIGN value=floatingPointLiteral # floatProperty
	| key=qualifiedIdentifier ASSIGN value=booleanLiteral # booleanProperty
	| key=qualifiedIdentifier ASSIGN value=StringLiteral # stringProperty
	;
	
// PREAMBLE END


// STATEMENT BEGIN

/** Core of every query: specify what to extract from where */
statement
 	: FROM corpusSelectorList SELECT layerSelectorList constraintStatement groupStatement?
 	;
 	
corpusSelectorList
	: corpusSelector (COMMA corpusSelector)*
	;
	
corpusSelector
	: (id=qualifiedIdentifier | uri=StringLiteral) (AS renamed=Identifier)? 
	;

layerSelectorList
	: layerSelector (COMMA layerSelector)*
	;
	
layerSelector 
	: id=qualifiedIdentifier (AS PRIMARY? layerAlias=Identifier | AS PRIMARY? SCOPE scopeAlias=Identifier LPAREN scopeElementList RPAREN)?
	;

scopeElementList
	: qualifiedIdentifier STAR? (COMMA qualifiedIdentifier STAR?)*
	;


// RESULT BEGIN

/** Post-processing directives for generating textual/statistical results */
result
	:
	;

// RESULT END


// APPENDIX BEGIN

/** Currently appendix of a query can only hold binary payloads as hex strings */
appendix
	: binaryPayload (COMMA binaryPayload)*
	;
	
binaryPayload
	: id=variableName ASSIGN HexLiteral
	;

// APPENDIX END

FROM : 'FROM' | 'from' ;
SETUP : 'SETUP' | 'setup' ;
SELECT : 'SELECT' | 'select' ;
SCOPE : 'SCOPE' | 'scope' ;
WHERE : 'WHERE' | 'where' ;
IMPORT : 'IMPORT' | 'import' ;
DIALECT : 'DIALECT' | 'dialect' ;
PRIMARY : 'PRIMARY' | 'primary' ;
APPEND : 'APPEND' | 'append' ;
RETURN : 'RETURN' | 'return' ;
APPENDIX : 'APPENDIX' | 'appendix' ;
LOCAL : 'LOCAL' | 'local' ;
LIMIT : 'LIMIT' | 'limit' ;



VersionPrefix
	: 'v'
	;

HexLiteral
	:	'0' [xX] HexDigits
	;

fragment
HexDigits
	:	HexDigit (HexDigitsAndUnderscores? HexDigit)?
	;

fragment
HexDigit
	:	[0-9a-fA-F]
	;

fragment
HexDigitsAndUnderscores
	:	HexDigitOrUnderscore+
	;

fragment
HexDigitOrUnderscore
	:	HexDigit
	|	'_'
	;